{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BookTable","props","handleSubmit","e","title","author","pages","read","preventDefault","i","target","length","name","value","Number","checked","reset","books","state","push","window","localStorage","setItem","JSON","stringify","setState","handleClick","index","getAttribute","confirm","splice","getItem","parse","this","map","book","BookRow","onClick","id","onSubmit","AddBookForm","React","Component","DeleteBookButton","ReadStatusCell","class","AddBookButton","type","placeholder","form","required","min","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f10c53ce.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\n\nfunction App () {\n  return (\n    <BookTable />\n  )\n}\n\nclass BookTable extends React.Component {\n  constructor(props) {\n    super(props)\n    window.localStorage.setItem('books', [{}])\n    if (window.localStorage.getItem('books') === null) {\n      window.localStorage.setItem('books', [{}])\n    }\n    this.state = {books: JSON.parse(window.localStorage.getItem('books'))}\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    let title, author, pages, read\n    for (let i = 0; i < e.target.length; i++) {\n      switch (e.target[i].name) {\n        case 'fTitle':\n          title = e.target[i].value\n          break\n        case 'fAuthor':\n          author = e.target[i].value\n          break\n        case 'fPages':\n          pages = Number(e.target[i].value)\n          break\n        case 'fRead':\n          read = e.target[i].checked\n          break\n        default:\n          break\n      }\n    }\n    e.target.reset()\n    let books = this.state.books\n    books.push({title, author, pages, read})\n    window.localStorage.setItem('books', JSON.stringify(books))\n    this.setState({'books': books})\n  }\n\n  handleClick = (e, index, title) => {\n    switch (e.target.getAttribute('class')) {\n      case 'deleteButton':\n        if (window.confirm(`Are you sure you want to delete ${title}?`)) {\n          let books = this.state.books\n          books.splice(index, 1)\n          window.localStorage.setItem('books', JSON.stringify(books))\n          this.setState({'books': books})\n        }\n        break\n      case 'readStatusCell':\n        let books = this.state.books\n        books[index].read = !books[index].read\n        window.localStorage.setItem('books', JSON.stringify(books))\n        this.setState({'books': books})\n        break\n      default:\n        break\n    }\n  }\n\n  render() {\n    return (\n      <table>\n        <tr>\n          <td></td>\n          <th>Title</th>\n          <th>Author</th>\n          <th>Pages</th>\n          <th>Read?</th>\n        </tr>\n        {this.state.books.map((book, index) => {\n          return <BookRow\n            title={book.title}\n            author={book.author}\n            pages={book.pages}\n            read={book.read ? 'yes' : 'no'}\n            onClick={(e) => this.handleClick(e, index, book.title)}\n          />\n        })}\n        <form id='newBookForm' onSubmit={this.handleSubmit} />\n        <AddBookForm />\n      </table>\n    )\n  }\n}\n\nfunction BookRow (props) {\n  return (\n    <tr>\n      <td>\n        <DeleteBookButton\n          onClick={props.onClick}\n        />\n      </td>\n      <td>{props.title}</td>\n      <td>{props.author}</td>\n      <td>{props.pages}</td>\n      <ReadStatusCell read={props.read} onClick={props.onClick} />\n    </tr>\n  )\n}\n\nfunction ReadStatusCell (props) {\n  return (\n    <td class='readStatusCell' onClick={props.onClick}>{props.read}</td>\n  )\n}\n\nfunction AddBookForm () {\n  return (\n    <tr>\n      <td>\n        <AddBookButton />\n      </td>\n      <td>\n        <input\n          type='text'\n          name='fTitle'\n          placeholder='Enter book details...'\n          form='newBookForm'\n          required\n        />\n      </td>\n      <td>\n        <input\n          type='text'\n          name='fAuthor'\n          form='newBookForm'\n          required\n        />\n      </td>\n      <td>\n        <input\n          type='number'\n          name='fPages'\n          form='newBookForm'\n          min='1'\n          required\n        />\n      </td>\n      <td>\n        <input\n          type='checkbox'\n          name='fRead'\n          form='newBookForm'\n        />\n      </td>\n    </tr>\n  )\n}\n\nfunction DeleteBookButton (props) {\n  return (\n    <button class='deleteButton' onClick={props.onClick}>X</button>\n  )\n}\n\nfunction AddBookButton () {\n  return (\n    <input\n      type='submit'\n      form='newBookForm'\n      value='+'\n    />\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}